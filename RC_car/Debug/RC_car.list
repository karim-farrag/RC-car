
RC_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006ec  080006ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006ec  080006ec  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080006ec  080006ec  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006ec  080006ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006ec  080006ec  000016ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006f0  080006f0  000016f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006f4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006f8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006f8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eb1  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000560  00000000  00000000  00002ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015a  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f6d  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019dd  00000000  00000000  000266ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b2b9  00000000  00000000  000280cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005dc  00000000  00000000  000a33c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000a39a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080006d4 	.word	0x080006d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080006d4 	.word	0x080006d4

0800014c <main>:
void PWM_Config2();
void delay_us(int us);
int UltraSonic_GetDistance(int sensorId);
void DcMotor_Control(int motorId, int direction, int speed);

int main() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	Set_up();
 8000152:	f000 f81d 	bl	8000190 <Set_up>

	while (1) {
		int s = UltraSonic_GetDistance(1);
 8000156:	2001      	movs	r0, #1
 8000158:	f000 f974 	bl	8000444 <UltraSonic_GetDistance>
 800015c:	6078      	str	r0, [r7, #4]
		if (s>=0 && s<=400){
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	2b00      	cmp	r3, #0
 8000162:	db0e      	blt.n	8000182 <main+0x36>
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800016a:	dc0a      	bgt.n	8000182 <main+0x36>
			DcMotor_Control(1, 1, s/4);
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b00      	cmp	r3, #0
 8000170:	da00      	bge.n	8000174 <main+0x28>
 8000172:	3303      	adds	r3, #3
 8000174:	109b      	asrs	r3, r3, #2
 8000176:	461a      	mov	r2, r3
 8000178:	2101      	movs	r1, #1
 800017a:	2001      	movs	r0, #1
 800017c:	f000 f85c 	bl	8000238 <DcMotor_Control>
 8000180:	e004      	b.n	800018c <main+0x40>
		}
		else{
			DcMotor_Control(1, 1, 0);
 8000182:	2200      	movs	r2, #0
 8000184:	2101      	movs	r1, #1
 8000186:	2001      	movs	r0, #1
 8000188:	f000 f856 	bl	8000238 <DcMotor_Control>
	while (1) {
 800018c:	e7e3      	b.n	8000156 <main+0xa>
	...

08000190 <Set_up>:


	}
}

void Set_up() {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	// === Enable Clocks ===
	RCC->APB2ENR |= (1 << 0);    // AFIO
 8000194:	4b21      	ldr	r3, [pc, #132]	@ (800021c <Set_up+0x8c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a20      	ldr	r2, [pc, #128]	@ (800021c <Set_up+0x8c>)
 800019a:	f043 0301 	orr.w	r3, r3, #1
 800019e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 2);    // GPIOA
 80001a0:	4b1e      	ldr	r3, [pc, #120]	@ (800021c <Set_up+0x8c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a1d      	ldr	r2, [pc, #116]	@ (800021c <Set_up+0x8c>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 3);    // GPIOB
 80001ac:	4b1b      	ldr	r3, [pc, #108]	@ (800021c <Set_up+0x8c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a1a      	ldr	r2, [pc, #104]	@ (800021c <Set_up+0x8c>)
 80001b2:	f043 0308 	orr.w	r3, r3, #8
 80001b6:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 9);    // ADC1
 80001b8:	4b18      	ldr	r3, [pc, #96]	@ (800021c <Set_up+0x8c>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a17      	ldr	r2, [pc, #92]	@ (800021c <Set_up+0x8c>)
 80001be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001c2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 11);	 // Timer1 (Delay)
 80001c4:	4b15      	ldr	r3, [pc, #84]	@ (800021c <Set_up+0x8c>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a14      	ldr	r2, [pc, #80]	@ (800021c <Set_up+0x8c>)
 80001ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80001ce:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= (1 << 0);    // Timer2 (PWM motor 1)
 80001d0:	4b12      	ldr	r3, [pc, #72]	@ (800021c <Set_up+0x8c>)
 80001d2:	69db      	ldr	r3, [r3, #28]
 80001d4:	4a11      	ldr	r2, [pc, #68]	@ (800021c <Set_up+0x8c>)
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= (1 << 1);    // Timer3 (PWM motor 2)
 80001dc:	4b0f      	ldr	r3, [pc, #60]	@ (800021c <Set_up+0x8c>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a0e      	ldr	r2, [pc, #56]	@ (800021c <Set_up+0x8c>)
 80001e2:	f043 0302 	orr.w	r3, r3, #2
 80001e6:	61d3      	str	r3, [r2, #28]

	// === Disable AFIO Remap for TIM3 CH1 on PA6 ===
	AFIO->MAPR &= ~(1 << 8);     // No remap
 80001e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000220 <Set_up+0x90>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000220 <Set_up+0x90>)
 80001ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80001f2:	6053      	str	r3, [r2, #4]

	// === GPIO Configuration ===
	GPIOA->CRL = 0x4B44444B;		//PA0 output motor1
 80001f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <Set_up+0x94>)
 80001f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <Set_up+0x98>)
 80001f8:	601a      	str	r2, [r3, #0]
									//PA6 output motor2
	GPIOA->CRH = 0x44443344;//PA10-PA11 output push-pull for the dir. of motor1
 80001fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <Set_up+0x94>)
 80001fc:	4a0b      	ldr	r2, [pc, #44]	@ (800022c <Set_up+0x9c>)
 80001fe:	605a      	str	r2, [r3, #4]
	GPIOB->CRL = 0x44444444;
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <Set_up+0xa0>)
 8000202:	f04f 3244 	mov.w	r2, #1145324612	@ 0x44444444
 8000206:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0x34343344;//PB10-PB11 output push-pull for the dir. of motor2
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <Set_up+0xa0>)
 800020a:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <Set_up+0xa4>)
 800020c:	605a      	str	r2, [r3, #4]
							//PB12 input floating ( ultrasonic1 echo )
							//PB13 output push-pull ( ultrasonic1 trig )
							//PB14 input floating ( ultrasonic2 echo )
							//PB15 output push-pull ( ultrasonic2 trig )

	PWM_Config1();
 800020e:	f000 f897 	bl	8000340 <PWM_Config1>
	PWM_Config2();
 8000212:	f000 f8dd 	bl	80003d0 <PWM_Config2>

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000
 8000220:	40010000 	.word	0x40010000
 8000224:	40010800 	.word	0x40010800
 8000228:	4b44444b 	.word	0x4b44444b
 800022c:	44443344 	.word	0x44443344
 8000230:	40010c00 	.word	0x40010c00
 8000234:	34343344 	.word	0x34343344

08000238 <DcMotor_Control>:

void DcMotor_Control(int motorId, int direction, int speed) {
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]

	if (motorId == 1) {							// left motor
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d125      	bne.n	8000296 <DcMotor_Control+0x5e>
		if (direction == 1) {					//clockwise
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d10c      	bne.n	800026a <DcMotor_Control+0x32>
			GPIOA->ODR |= (1 << 10);			//IN1
 8000250:	4b25      	ldr	r3, [pc, #148]	@ (80002e8 <DcMotor_Control+0xb0>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a24      	ldr	r2, [pc, #144]	@ (80002e8 <DcMotor_Control+0xb0>)
 8000256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800025a:	60d3      	str	r3, [r2, #12]
			GPIOA->ODR &= ~(1 << 11);			//IN2
 800025c:	4b22      	ldr	r3, [pc, #136]	@ (80002e8 <DcMotor_Control+0xb0>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a21      	ldr	r2, [pc, #132]	@ (80002e8 <DcMotor_Control+0xb0>)
 8000262:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000266:	60d3      	str	r3, [r2, #12]
 8000268:	e00b      	b.n	8000282 <DcMotor_Control+0x4a>
		} else {								//anti-clockwise
			GPIOA->ODR &= ~(1 << 10);
 800026a:	4b1f      	ldr	r3, [pc, #124]	@ (80002e8 <DcMotor_Control+0xb0>)
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	4a1e      	ldr	r2, [pc, #120]	@ (80002e8 <DcMotor_Control+0xb0>)
 8000270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000274:	60d3      	str	r3, [r2, #12]
			GPIOA->ODR |= (1 << 11);
 8000276:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <DcMotor_Control+0xb0>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	4a1b      	ldr	r2, [pc, #108]	@ (80002e8 <DcMotor_Control+0xb0>)
 800027c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000280:	60d3      	str	r3, [r2, #12]
		}
		TIM2->CCR1 = speed * 40;			//Duty Cycle
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4613      	mov	r3, r2
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	4413      	add	r3, r2
 800028a:	00db      	lsls	r3, r3, #3
 800028c:	461a      	mov	r2, r3
 800028e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000292:	635a      	str	r2, [r3, #52]	@ 0x34
			GPIOB->ODR |= (1 << 11);			//IN2
		}
		TIM3->CCR1 = speed * 40;			//Duty Cycle

	}
}
 8000294:	e023      	b.n	80002de <DcMotor_Control+0xa6>
		if (direction == 1) {					//clockwise
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d10c      	bne.n	80002b6 <DcMotor_Control+0x7e>
			GPIOB->ODR |= (1 << 10);
 800029c:	4b13      	ldr	r3, [pc, #76]	@ (80002ec <DcMotor_Control+0xb4>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a12      	ldr	r2, [pc, #72]	@ (80002ec <DcMotor_Control+0xb4>)
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002a6:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR &= ~(1 << 11);
 80002a8:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <DcMotor_Control+0xb4>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a0f      	ldr	r2, [pc, #60]	@ (80002ec <DcMotor_Control+0xb4>)
 80002ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002b2:	60d3      	str	r3, [r2, #12]
 80002b4:	e00b      	b.n	80002ce <DcMotor_Control+0x96>
			GPIOB->ODR &= ~(1 << 10);			//IN1
 80002b6:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <DcMotor_Control+0xb4>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a0c      	ldr	r2, [pc, #48]	@ (80002ec <DcMotor_Control+0xb4>)
 80002bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002c0:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR |= (1 << 11);			//IN2
 80002c2:	4b0a      	ldr	r3, [pc, #40]	@ (80002ec <DcMotor_Control+0xb4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	4a09      	ldr	r2, [pc, #36]	@ (80002ec <DcMotor_Control+0xb4>)
 80002c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80002cc:	60d3      	str	r3, [r2, #12]
		TIM3->CCR1 = speed * 40;			//Duty Cycle
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	4613      	mov	r3, r2
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	4413      	add	r3, r2
 80002d6:	00db      	lsls	r3, r3, #3
 80002d8:	461a      	mov	r2, r3
 80002da:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <DcMotor_Control+0xb8>)
 80002dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002de:	bf00      	nop
 80002e0:	3714      	adds	r7, #20
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	40010800 	.word	0x40010800
 80002ec:	40010c00 	.word	0x40010c00
 80002f0:	40000400 	.word	0x40000400

080002f4 <delay_us>:
	while ((TIM1->SR & 1) == 0)
		;
	TIM1->CR1 = 0;
}

void delay_us(int us) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	TIM1->CNT = 0;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <delay_us+0x48>)
 80002fe:	2200      	movs	r2, #0
 8000300:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->PSC = 8 - 1;
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <delay_us+0x48>)
 8000304:	2207      	movs	r2, #7
 8000306:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = us - 1;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	1e5a      	subs	r2, r3, #1
 800030c:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <delay_us+0x48>)
 800030e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->SR = 0;
 8000310:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <delay_us+0x48>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
	TIM1->CR1 = 1;
 8000316:	4b09      	ldr	r3, [pc, #36]	@ (800033c <delay_us+0x48>)
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
	while ((TIM1->SR & 1) == 0)
 800031c:	bf00      	nop
 800031e:	4b07      	ldr	r3, [pc, #28]	@ (800033c <delay_us+0x48>)
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <delay_us+0x2a>
		;
	TIM1->CR1 = 0;
 800032a:	4b04      	ldr	r3, [pc, #16]	@ (800033c <delay_us+0x48>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012c00 	.word	0x40012c00

08000340 <PWM_Config1>:

void PWM_Config1() {
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	TIM2->CCER |= (1 << 0); 				// Enable CH1 output (PA0)
 8000344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000348:	6a1b      	ldr	r3, [r3, #32]
 800034a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6213      	str	r3, [r2, #32]
	TIM2->CCMR1 |= (0b110 << 4); 			// PWM Mode 1
 8000354:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800035e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000362:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1 << 3); 				// Preload enable
 8000364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6193      	str	r3, [r2, #24]
	TIM2->CR1 |= (1 << 7); 					// ARPE enable
 8000374:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800037e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000382:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= (0b10 << 5); 				// Center-aligned mode 2
 8000384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800038e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000392:	6013      	str	r3, [r2, #0]
	TIM2->ARR = 4000; 						// Auto-reload (period)
 8000394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000398:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800039c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = 0; 						// Start at 0% duty
 800039e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a2:	2200      	movs	r2, #0
 80003a4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->EGR |= (1 << 0); 					// Update registers
 80003a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= (1 << 0); 					// Start TIM3
 80003b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6013      	str	r3, [r2, #0]
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
	...

080003d0 <PWM_Config2>:

void PWM_Config2() {
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	TIM3->CCER |= (1 << 0); 				// Enable CH1 output (PA6)
 80003d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <PWM_Config2+0x70>)
 80003d6:	6a1b      	ldr	r3, [r3, #32]
 80003d8:	4a19      	ldr	r2, [pc, #100]	@ (8000440 <PWM_Config2+0x70>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 |= (0b110 << 4); 			// PWM Mode 1
 80003e0:	4b17      	ldr	r3, [pc, #92]	@ (8000440 <PWM_Config2+0x70>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a16      	ldr	r2, [pc, #88]	@ (8000440 <PWM_Config2+0x70>)
 80003e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80003ea:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (1 << 3); 				// Preload enable
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <PWM_Config2+0x70>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a13      	ldr	r2, [pc, #76]	@ (8000440 <PWM_Config2+0x70>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
	TIM3->CR1 |= (1 << 7); 					// ARPE enable
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <PWM_Config2+0x70>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a10      	ldr	r2, [pc, #64]	@ (8000440 <PWM_Config2+0x70>)
 80003fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000402:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (0b10 << 5); 				// Center-aligned mode 2
 8000404:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <PWM_Config2+0x70>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <PWM_Config2+0x70>)
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	6013      	str	r3, [r2, #0]
	TIM3->ARR = 4000; 						// Auto-reload (period)
 8000410:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <PWM_Config2+0x70>)
 8000412:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000416:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCR1 = 0; 						// Start at 0% duty
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <PWM_Config2+0x70>)
 800041a:	2200      	movs	r2, #0
 800041c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->EGR |= (1 << 0); 					// Update registers
 800041e:	4b08      	ldr	r3, [pc, #32]	@ (8000440 <PWM_Config2+0x70>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a07      	ldr	r2, [pc, #28]	@ (8000440 <PWM_Config2+0x70>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= (1 << 0); 					// Start TIM3
 800042a:	4b05      	ldr	r3, [pc, #20]	@ (8000440 <PWM_Config2+0x70>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a04      	ldr	r2, [pc, #16]	@ (8000440 <PWM_Config2+0x70>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6013      	str	r3, [r2, #0]
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40000400 	.word	0x40000400

08000444 <UltraSonic_GetDistance>:

int UltraSonic_GetDistance(int sensorId) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]

	if (sensorId == 1) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d154      	bne.n	80004fc <UltraSonic_GetDistance+0xb8>
		GPIOB->ODR |= (1 << 13);			//trig1 ON
 8000452:	4b55      	ldr	r3, [pc, #340]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	4a54      	ldr	r2, [pc, #336]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000458:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800045c:	60d3      	str	r3, [r2, #12]
		delay_us(10);
 800045e:	200a      	movs	r0, #10
 8000460:	f7ff ff48 	bl	80002f4 <delay_us>
		GPIOB->ODR &= ~(1 << 13);			//trig1 OFF
 8000464:	4b50      	ldr	r3, [pc, #320]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a4f      	ldr	r2, [pc, #316]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 800046a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800046e:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 8 - 1;
 8000470:	4b4e      	ldr	r3, [pc, #312]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 8000472:	2207      	movs	r2, #7
 8000474:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->CNT = 0;
 8000476:	4b4d      	ldr	r3, [pc, #308]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 8000478:	2200      	movs	r2, #0
 800047a:	625a      	str	r2, [r3, #36]	@ 0x24
		int counter = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]

		while (!(GPIOB->IDR & (1 << 12))) {
 8000480:	e009      	b.n	8000496 <UltraSonic_GetDistance+0x52>
			counter++;
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	3301      	adds	r3, #1
 8000486:	61fb      	str	r3, [r7, #28]
			if (counter == 1000000) {
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	4a49      	ldr	r2, [pc, #292]	@ (80005b0 <UltraSonic_GetDistance+0x16c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d102      	bne.n	8000496 <UltraSonic_GetDistance+0x52>
				return 1000;
 8000490:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000494:	e083      	b.n	800059e <UltraSonic_GetDistance+0x15a>
		while (!(GPIOB->IDR & (1 << 12))) {
 8000496:	4b44      	ldr	r3, [pc, #272]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0ef      	beq.n	8000482 <UltraSonic_GetDistance+0x3e>
			}
		};
		TIM1->CR1 |= (1 << 0);
 80004a2:	4b42      	ldr	r3, [pc, #264]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a41      	ldr	r2, [pc, #260]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
		counter = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
		while ((GPIOB->IDR & (1 << 12))) {
 80004b2:	e009      	b.n	80004c8 <UltraSonic_GetDistance+0x84>
			counter++;
 80004b4:	69fb      	ldr	r3, [r7, #28]
 80004b6:	3301      	adds	r3, #1
 80004b8:	61fb      	str	r3, [r7, #28]
			if (counter == 1000000) {
 80004ba:	69fb      	ldr	r3, [r7, #28]
 80004bc:	4a3c      	ldr	r2, [pc, #240]	@ (80005b0 <UltraSonic_GetDistance+0x16c>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d102      	bne.n	80004c8 <UltraSonic_GetDistance+0x84>
				return 1000;
 80004c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004c6:	e06a      	b.n	800059e <UltraSonic_GetDistance+0x15a>
		while ((GPIOB->IDR & (1 << 12))) {
 80004c8:	4b37      	ldr	r3, [pc, #220]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d1ef      	bne.n	80004b4 <UltraSonic_GetDistance+0x70>
			}
		};
		int duration = TIM1->CNT;					//in us
 80004d4:	4b35      	ldr	r3, [pc, #212]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 80004d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d8:	60fb      	str	r3, [r7, #12]
		int distance = (duration * 343) / 20000;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	f240 1257 	movw	r2, #343	@ 0x157
 80004e0:	fb02 f303 	mul.w	r3, r2, r3
 80004e4:	4a33      	ldr	r2, [pc, #204]	@ (80005b4 <UltraSonic_GetDistance+0x170>)
 80004e6:	fb82 1203 	smull	r1, r2, r2, r3
 80004ea:	1352      	asrs	r2, r2, #13
 80004ec:	17db      	asrs	r3, r3, #31
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	60bb      	str	r3, [r7, #8]
		TIM1->CR1 = 0;
 80004f2:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
		return distance;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	e050      	b.n	800059e <UltraSonic_GetDistance+0x15a>

	}

	else {
		GPIOB->ODR |= (1 << 15);
 80004fc:	4b2a      	ldr	r3, [pc, #168]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	4a29      	ldr	r2, [pc, #164]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000506:	60d3      	str	r3, [r2, #12]
		delay_us(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f7ff fef3 	bl	80002f4 <delay_us>
		GPIOB->ODR &= ~(1 << 15);
 800050e:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	4a25      	ldr	r2, [pc, #148]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000514:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000518:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 8 - 1;
 800051a:	4b24      	ldr	r3, [pc, #144]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 800051c:	2207      	movs	r2, #7
 800051e:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->CNT = 0;
 8000520:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	@ 0x24
		int counter = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]

		while (!(GPIOB->IDR & (1 << 14))) {
 800052a:	e009      	b.n	8000540 <UltraSonic_GetDistance+0xfc>
			counter++;
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	3301      	adds	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
			if (counter == 1000000) {
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	4a1e      	ldr	r2, [pc, #120]	@ (80005b0 <UltraSonic_GetDistance+0x16c>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d102      	bne.n	8000540 <UltraSonic_GetDistance+0xfc>
				return 1000;
 800053a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800053e:	e02e      	b.n	800059e <UltraSonic_GetDistance+0x15a>
		while (!(GPIOB->IDR & (1 << 14))) {
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0ef      	beq.n	800052c <UltraSonic_GetDistance+0xe8>
			}
		};
		TIM1->CR1 |= (1 << 0);
 800054c:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
		counter = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
		while ((GPIOB->IDR & (1 << 14))) {
 800055c:	e009      	b.n	8000572 <UltraSonic_GetDistance+0x12e>
			counter++;
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	3301      	adds	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
			if (counter == 1000000) {
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	4a12      	ldr	r2, [pc, #72]	@ (80005b0 <UltraSonic_GetDistance+0x16c>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d102      	bne.n	8000572 <UltraSonic_GetDistance+0x12e>
				return 1000;
 800056c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000570:	e015      	b.n	800059e <UltraSonic_GetDistance+0x15a>
		while ((GPIOB->IDR & (1 << 14))) {
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <UltraSonic_GetDistance+0x164>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1ef      	bne.n	800055e <UltraSonic_GetDistance+0x11a>
			}
		};
		int duration = TIM1->CNT;					//in us
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <UltraSonic_GetDistance+0x168>)
 8000580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000582:	617b      	str	r3, [r7, #20]
		int distance = (duration * 343) / 20000;
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	f240 1257 	movw	r2, #343	@ 0x157
 800058a:	fb02 f303 	mul.w	r3, r2, r3
 800058e:	4a09      	ldr	r2, [pc, #36]	@ (80005b4 <UltraSonic_GetDistance+0x170>)
 8000590:	fb82 1203 	smull	r1, r2, r2, r3
 8000594:	1352      	asrs	r2, r2, #13
 8000596:	17db      	asrs	r3, r3, #31
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	613b      	str	r3, [r7, #16]
		return distance;
 800059c:	693b      	ldr	r3, [r7, #16]

	}

}
 800059e:	4618      	mov	r0, r3
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010c00 	.word	0x40010c00
 80005ac:	40012c00 	.word	0x40012c00
 80005b0:	000f4240 	.word	0x000f4240
 80005b4:	68db8bad 	.word	0x68db8bad

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <NMI_Handler+0x4>

080005c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <MemManage_Handler+0x4>

080005d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <BusFault_Handler+0x4>

080005d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <UsageFault_Handler+0x4>

080005e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000608:	f000 f82e 	bl	8000668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff fff8 	bl	8000610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480b      	ldr	r0, [pc, #44]	@ (8000650 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000622:	490c      	ldr	r1, [pc, #48]	@ (8000654 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000624:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000638:	4c09      	ldr	r4, [pc, #36]	@ (8000660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f000 f821 	bl	800068c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fd7f 	bl	800014c <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000658:	080006f4 	.word	0x080006f4
  ldr r2, =_sbss
 800065c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000660:	20000024 	.word	0x20000024

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <HAL_IncTick+0x1c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <HAL_IncTick+0x20>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a03      	ldr	r2, [pc, #12]	@ (8000688 <HAL_IncTick+0x20>)
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	20000000 	.word	0x20000000
 8000688:	20000020 	.word	0x20000020

0800068c <__libc_init_array>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	2600      	movs	r6, #0
 8000690:	4d0c      	ldr	r5, [pc, #48]	@ (80006c4 <__libc_init_array+0x38>)
 8000692:	4c0d      	ldr	r4, [pc, #52]	@ (80006c8 <__libc_init_array+0x3c>)
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	42a6      	cmp	r6, r4
 800069a:	d109      	bne.n	80006b0 <__libc_init_array+0x24>
 800069c:	f000 f81a 	bl	80006d4 <_init>
 80006a0:	2600      	movs	r6, #0
 80006a2:	4d0a      	ldr	r5, [pc, #40]	@ (80006cc <__libc_init_array+0x40>)
 80006a4:	4c0a      	ldr	r4, [pc, #40]	@ (80006d0 <__libc_init_array+0x44>)
 80006a6:	1b64      	subs	r4, r4, r5
 80006a8:	10a4      	asrs	r4, r4, #2
 80006aa:	42a6      	cmp	r6, r4
 80006ac:	d105      	bne.n	80006ba <__libc_init_array+0x2e>
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b4:	4798      	blx	r3
 80006b6:	3601      	adds	r6, #1
 80006b8:	e7ee      	b.n	8000698 <__libc_init_array+0xc>
 80006ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80006be:	4798      	blx	r3
 80006c0:	3601      	adds	r6, #1
 80006c2:	e7f2      	b.n	80006aa <__libc_init_array+0x1e>
 80006c4:	080006ec 	.word	0x080006ec
 80006c8:	080006ec 	.word	0x080006ec
 80006cc:	080006ec 	.word	0x080006ec
 80006d0:	080006f0 	.word	0x080006f0

080006d4 <_init>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr

080006e0 <_fini>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr
